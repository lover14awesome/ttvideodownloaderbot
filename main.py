import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest
import json
import os
from flask import Flask
import threading
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [1341404143]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
SETTINGS_FILE = "settings.json"
flask_app = Flask(__name__)


@flask_app.route('/')
def home():
    return 'Bot is running!'


def load_settings():
    try:
        with open("settings.json", "r", encoding="utf-8") as f:
            settings = json.load(f)
    except FileNotFoundError:
        settings = {}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    settings.setdefault("caption",
                        "<a href='https://t.me/video4k_downloader_bot'>üîó –°–∫–∞—á–∞–Ω–æ –∏–∑ TikTok Video Downloader</a>")
    settings.setdefault("requirements_enabled", False)
    settings.setdefault("channels", [])

    return settings


def save_settings(settings):
    with open("settings.json", "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=2, ensure_ascii=False)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –ª—é–±–æ–µ –≤–∏–¥–µ–æ –∏–∑ TikTok *–±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞*.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å —Ñ–∞–π–ª –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –º—É—Å–æ—Ä–∞!\n\n"
        "üì≤ –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏! üòâ",
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    settings = load_settings()
    url = update.message.text.strip()

    if not url.startswith("http"):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É.")
        return

    # üëá –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ TikTok
    if "tiktok.com" not in url and "vm.tiktok.com" not in url:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok.")
        return

    if settings.get("requirements_enabled"):
        user_id = update.effective_user.id
        channel_list = settings.get("required_channels", [])
        for channel_url in channel_list:
            channel = channel_url
            if channel.startswith("https://t.me/"):
                channel = "@" + channel.split("/")[-1]

            try:
                member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
                if member.status not in ["member", "administrator", "creator"]:
                    raise Exception()
            except Exception:
                await update.message.reply_text(
                    f"‚ùó –ü–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤–∏–¥–µ–æ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n" + "\n".join(channel_list),
                    parse_mode=ParseMode.HTML
                )
                return

    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    api_url = f"https://tikwm.com/api/?url={url}"
    response = requests.get(api_url).json()

    if not response.get("data") or not response["data"].get("play"):
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.")
        return

    video_url = response["data"]["play"]
    try:
        video_bytes = requests.get(video_url).content
        await update.message.reply_video(
            video=video_bytes,
            caption=settings.get("caption", ""),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:\n{str(e)}")


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    settings = load_settings()
    caption = settings.get("caption", "–ù–µ—Ç")
    enabled = settings.get("requirements_enabled", False)
    channels = settings.get("required_channels", [])
    channel_list = "\n".join([f"- {ch}" for ch in channels]) if channels else "–ù–µ—Ç"

    msg = (
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        f"üìÑ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å—å: {caption}\n"
        f"‚úÖ –£—Å–ª–æ–≤–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {enabled}\n"
        f"üì¢ –ö–∞–Ω–∞–ª—ã:\n{channel_list}\n\n"
        "/set_caption &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ –≤–∏–¥–µ–æ\n"
        "/toggle_reqs ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è\n"
        "/add_channel &lt;—Å—Å—ã–ª–∫–∞&gt; ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/remove_channel &lt;—Å—Å—ã–ª–∫–∞&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"
    )

    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)


async def set_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    settings = load_settings()
    settings["caption"] = text
    save_settings(settings)
    await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


async def toggle_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    settings = load_settings()
    settings["requirements_enabled"] = not settings.get("requirements_enabled", False)
    save_settings(settings)
    state = "–≤–∫–ª—é—á–µ–Ω—ã" if settings["requirements_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await update.message.reply_text(f"‚úÖ –£—Å–ª–æ–≤–∏—è —Ç–µ–ø–µ—Ä—å {state}.")


async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    settings = load_settings()
    if text not in settings.get("required_channels", []):
        settings.setdefault("required_channels", []).append(text)
        save_settings(settings)
        await update.message.reply_text("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")


async def remove_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    settings = load_settings()
    if text in settings.get("required_channels", []):
        settings["required_channels"].remove(text)
        save_settings(settings)
        await update.message.reply_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")


async def start_bot():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("set_caption", set_caption))
    application.add_handler(CommandHandler("toggle_reqs", toggle_requirements))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("remove_channel", remove_channel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    await application.bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

if __name__ == "__main__":
    import multiprocessing

    def flask_thread():
        flask_app.run(host="0.0.0.0", port=10000)

    def bot_process():
        asyncio.run(start_bot())

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    flask = multiprocessing.Process(target=flask_thread)
    flask.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_process()
